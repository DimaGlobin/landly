name: Backend CI/CD

on:
  push:
    branches: [ develop, main ]
    paths:
      - 'apps/backend/**'
      - '.github/workflows/backend-go.yml'
  pull_request:
    branches: [ develop, main ]
    paths:
      - 'apps/backend/**'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install dependencies
        working-directory: apps/backend
        run: go mod download

      - name: Run unit tests
        working-directory: apps/backend
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/backend/coverage.out
          flags: backend-unit
          name: backend-unit-coverage

      - name: Run linter
        working-directory: apps/backend
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          golangci-lint run

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: landly_test
          POSTGRES_PASSWORD: landly_test
          POSTGRES_DB: landly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Start MinIO
        run: |
          docker run -d \
            --name minio \
            -p 9000:9000 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            minio/minio server /data
          
          # Wait for MinIO to be ready
          timeout 30 bash -c 'until curl -sf http://localhost:9000/minio/health/live; do sleep 1; done'

      - name: Install dependencies
        working-directory: apps/backend
        run: go mod download

      - name: Run integration tests
        working-directory: apps/backend
        env:
          TEST_POSTGRES_HOST: localhost
          TEST_POSTGRES_PORT: 5432
          TEST_POSTGRES_USER: landly_test
          TEST_POSTGRES_PASSWORD: landly_test
          TEST_POSTGRES_DB: landly_test
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379
          TEST_S3_ENDPOINT: localhost:9000
          TEST_S3_ACCESS_KEY: minioadmin
          TEST_S3_SECRET_KEY: minioadmin
        run: go test -v -tags=integration -coverprofile=coverage-integration.out ./...

      - name: Upload integration coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/backend/coverage-integration.out
          flags: backend-integration
          name: backend-integration-coverage

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend
          tags: |
            type=ref,event=branch
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to production
        run: |
          echo "Deployment step (configure your deployment here)"
          # Example: SSH to server and pull new image
          # ssh user@server 'docker-compose pull backend && docker-compose up -d backend'
